using System;
using System.Collections.Specialized;
using System.Configuration;

namespace Dunk.Tools.Configuration.Base
{
    /// <summary>
    /// An interface that defines the behaviour of a class that can
    /// be used to manage access to application config.
    /// </summary>
    /// <remarks>
    /// Based on Nathan Gloyn's IConfigurationManager article
    /// Copyright (c) 2011 Nathan Gloyn
    /// 
    /// https://github.com/NathanGloyn/IConfigurationManager 
    /// </remarks>
    public interface IConfigurationManager
    {
        /// <summary>
        /// Gets the <see cref="System.Configuration.AppSettingsSection"/> data for the current application's
        /// default configuration.
        /// </summary>
        /// <returns>
        /// Returns a <see cref="NameValueCollection"/> object that contains the contents of the 
        /// <see cref="AppSettingsSection"/> object for the current application's default
        /// configuration.
        /// </returns>

        NameValueCollection AppSettings { get; }

        /// <summary>
        /// Gets the <see cref="System.Configuration.ConnectionStringsSection"/> data for the current application's
        /// default configuration.
        /// </summary>
        /// <returns>
        /// Returns a <see cref="ConnectionStringSettingsCollection"/> object that contains the contents of the 
        /// <see cref="ConnectionStringsSection"/> object for the current application's default
        /// configuration.
        /// </returns>
        ConnectionStringSettingsCollection ConnectionStrings { get; }

        /// <summary>
        /// Retrieves a specified configuration section for the current application's default
        /// configuration.
        /// </summary>
        /// <typeparam name="T">The type associated with the configuration section.</typeparam>
        /// <param name="sectionName">The configuration section path and name.</param>
        /// <returns>
        /// The specified <see cref="ConfigurationSection"/> object, or null if the
        /// section does not exist.
        /// </returns>
        T GetSection<T>(string sectionName);

        /// <summary>
        /// Gets a specific AppSetting as a specified type.
        /// </summary>
        /// <typeparam name="T">The type that is begin requested.</typeparam>
        /// <param name="key">Key of AppSetting to retrieve.</param>
        /// <returns>
        /// If able to return as the type then the converted value; otherwise an exception will be thrown.
        /// </returns>
        T GetAppSettingsAsType<T>(string key);

        /// <summary>
        /// Gets a specified AppSetting as a specified type or default value for that type.
        /// </summary>
        /// <typeparam name="T">The type that is begin requested.</typeparam>
        /// <param name="key">Key of AppSetting to retrieve.</param>
        /// <returns>
        /// If able to return as the type then the converted value; otherwise the default value for the type.
        /// </returns>
        T GetAppSettingsAsTypeOrDefault<T>(string key);

        /// <summary>
        /// Gets a specific AppSetting as a specified type or specified default value for that type.
        /// </summary>
        /// <typeparam name="T">The type that is begin requested.</typeparam>
        /// <param name="key">Key of AppSetting to retrieve.</param>
        /// <param name="defaultValue">The default instance of T.</param>
        /// <returns>
        /// If able to return as the type then the converted value; otherwise <paramref name="defaultValue"/>.
        /// </returns>
        T GetAppSettingsAsTypeOrDefault<T>(string key, T defaultValue);

        /// <summary>
        /// Gets a specific AppSetting as a specified type or specified default value for that type.
        /// </summary>
        /// <typeparam name="T">The type that is begin requested.</typeparam>
        /// <param name="key">Key of AppSetting to retrieve.</param>
        /// <param name="defaultFactory">A delegate for generating a default instance of T.</param>
        /// <returns>
        /// If able to return as the type then the converted value; otherwise default value generated by
        /// <paramref name="defaultFactory"/>.
        /// </returns>
        T GetAppSettingsAsTypeOrDefault<T>(string key, Func<T> defaultFactory);
    }
}
